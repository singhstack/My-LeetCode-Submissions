Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
             -----------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max_len,i,num=0,0,0
        while(i<len(s)):
            arr=[]
            arr.append(s[i])
            for j in range(i+1,len(s)):
                if (s[j] in arr):
#                    num+=i
#                    i=s[i:j].index(s[j])+num
                    break
                arr.append(s[j])
            if len(arr)>max_len:
                max_len=len(arr)
            if max_len>len(s)-i:
                return max_len
            i+=1
        return(max_len)
