'''
Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
'''

class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        
        
        while(k>=len(nums)):
            k-=len(nums)
        #insert last element in the beginning* K times
        #TIME LIMIT EXCEEDED
        '''while(k>0):
            print("NOT DOEN")
            temp=nums[-1]
            for i in range(len(nums)-1):
                j=len(nums)-1-i
                nums[j]=nums[j-1]
            nums[0]=temp
            k-=1'''
        #Pick up last k elements, put them in front
        temp=nums[len(nums)-k:]
        nums[k:]=nums[:len(nums)-k]
        nums[:k]=temp[:]
        
        #Cyclic replacement
            
