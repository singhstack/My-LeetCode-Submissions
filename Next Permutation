'''Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

'''

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        
        Do not return anything, modify nums in-place instead.
        """ 
        biggest=True
        for i in range(2,len(nums)+1):
            #Start from the back, find out where replacement in required. 
            #Ex: In [1,2,5,7,6,4,3] nums[-5]=5 needs to be swapped with nums[-3]=6
            if nums[-i]<nums[-i+1]:
                j=1
                while(j<i):
                    if nums[-j]>nums[-i]:
                        break
                    j+=1
                
                #Swapping
                temp=nums[-i]
                nums[-i]=nums[-j]
                nums[-j]=temp
                #Step 1 finished
                
                #Step2 Nums now is [1,2,6,7,5,4,3]. 
                #To get next permutation.. just reverse from nums[-4] to nums[-1]
                #Sorting/Reversing
                k=len(nums)-i+1
                temp_list=nums[k:]
                temp_list=temp_list[::-1]
                nums[k:]=temp_list[:]
                biggest=False
                break
        #if num is largest in permutation, simply reverse        
        if biggest:
            temp=[]
            temp[:]=nums[:]
            nums[:]=temp[::-1]
