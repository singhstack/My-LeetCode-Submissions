Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

------------------------------------------------------

class DLinkedList:
        def __init__(self):
            self.key=0
            self.val=0
            self.next=None
            self.prev=None
class LRUCache:
    def __init__(self, capacity: int):
        self.capacity=capacity
        self.dict={}
        self.size=0
        
        self.head = DLinkedList()
        self.tail = DLinkedList()
        
        self.head.next = self.tail
        self.tail.prev = self.head

        

    def get(self, key: int) -> int:
        if key not in self.dict:
            return -1

        requestednode=self.dict[key]
        self.movetotop(requestednode)
        return requestednode.val
    
    def removenode(self,node):
        prevnode=node.prev
        nextnode=node.next
        prevnode.next=nextnode
        nextnode.prev=prevnode
    def movetotop(self,node):
        
        self.removenode(node)
        self.addtotop(node)
        
    def addtotop(self,node):
        
        node.prev=self.head
        node.next=self.head.next
        
        self.head.next.prev=node
        self.head.next=node
    
    def removeleastused(self):
        removednode=self.tail.prev
        self.removenode(removednode)
        return removednode
                

    def put(self, key: int, value: int) -> None:
        
        node=self.dict.get(key,None)
        
        if not node:
            newNode = DLinkedList()
            newNode.key = key
            newNode.val = value
            
            self.addtotop(newNode)
            self.dict[key] = newNode
            self.size += 1
            
            if self.size>self.capacity:
                removedNode = self.removeleastused()
                del self.dict[removedNode.key]
                self.size -= 1
                
        else:
            node.val=value
            self.movetotop(node)
            return node.val
        
# LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
