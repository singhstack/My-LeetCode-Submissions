Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:


-----------------------------------------------
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        lex_dict={"2":"abc","3":"def","4":"ghi","5":"jkl","6":"mno","7":"pqrs","8":"tuv","9":"wxyz"}
        elements=[""]
        num=len(digits)
        if num==0:
            return []
        for i in range(num):
            string=lex_dict[digits[i]]
            arr=[]
            for j in range(len(string)):
                x=string[j]
                for elem in elements:
                    elem+=x
                    arr.append(elem)             
            elements=arr
        return elements
