Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.


*****************************************************

class Solution:
    #incorporate con where same letter cannnot be used twice
    def adjacent_options(self,i,j,matrix):
        #if i==0 and j==0:
        #    return [[0,1],[1,0],[1,1]]
        set=[[i,j+1],[i+1,j],[i-1,j],[i,j-1]]
        final_set=[]
        for x in set:
            if (x[0]>=0 and x[1]>=0) and x[0]<len(matrix) and x[1]<len(matrix[0]):
                final_set.append(x)
        return final_set
    
    def helper(self,matrix,i,j,words,used_already):
        print(words)
        if not words:
            return True
        for word in words:
            adjacent_cells=self.adjacent_options(i,j,matrix)
            #print("CELL: ",i,j," Adjacent Cells: ",adjacent_cells, "Used Cell: ",used_already)
            for cell in adjacent_cells:
                if word==matrix[cell[0]][cell[1]]and cell not in used_already:
                    used_already.append(cell)
                    if self.helper(matrix,cell[0],cell[1],words[1:],used_already):
                        return True
                    else:
                        used_already.remove(cell)
            return False            
            
    
    def exist(self, matrix: List[List[str]], word: str) -> bool:
        if not word:
            return True
        used_already=[]
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j]==word[0]:
                    used_already.append([i,j])
                    isthistheone=self.helper(matrix,i,j,word[1:],used_already)
                    if isthistheone:
                        return True
                    used_already=[]
        return False
